[%
	// Class Diagram
%] 

[%

@template
operation Class addImports() {
	var classImports = "";
	var genImports = "";
	var isList = 0;
	
	
	if(self.generalization != null) {
		for(gen in self.generalization) {
			genImports = genImports + "import " + gen.general.qualifiedName.replace("::", ".") + ";\n";
		}
	}
	
	for(ownedAttribute in self.ownedAttribute) {
		if(ownedAttribute.isTypeOf(Property)) {
			if(ownedAttribute.type.isTypeOf(Class)) {
				var qualified = ownedAttribute.type.qualifiedName;
				classImports = classImports + "import " + qualified.replace("::", ".") + ";\n";
			}
			if(ownedAttribute.upper!=1) {
				isList = 1;
			}
		}
	}
	
	var hibOperation = "";
	for(ownedOperation in self.ownedOperation) {
		for(ownedParameter in ownedOperation.ownedParameter) {
			if(ownedParameter.type.isTypeOf(Class)) {
				var qualified = ownedParameter.type.qualifiedName;
				classImports = classImports + "import " + qualified.replace("::", ".") + ";\n";
			}
			if(ownedParameter.upper!=1) {
				isList = 1;
			}
		}
		if(ownedOperation.getAppliedStereotypes().select(c|c.name="ContainsHibernate").size == 1) {
			if(hibOperation == "") {
				hibOperation = "import org.hibernate.*;\nimport org.hibernate.cfg.*;";
			}
		}
	}
	
	var lsImports = "";
	if(isList==1) {
		lsImports = "import java.util.List;\nimport java.util.LinkedList;\n";
	}
	
	var hibImports = "";
	if(self.getAppliedStereotypes().select(c|c.name="Entry" or c.name="SuperClass").size==1) {
		hibImports = "import java.io.Serializable;\nimport jakarta.persistence.*;\n";
	}
	
	var imports = genImports + classImports + lsImports + hibImports + hibOperation;
	%][%=imports%][%
}

@template
operation Class addProperties() {
	for(ownedAttribute in self.ownedAttribute) {
		if(ownedAttribute.isTypeOf(Property)) {
			%][%=ownedAttribute.buildProperty()%][%
		}
	}
}

@template
operation Property buildProperty() {
	var visibility = self.visibility;
	var name = self.name;
	var static = (self.isStatic() ? " static " : " ");
	var type = self.type.name.replace("EDate", "java.util.Date");
	var lsBegin = (self.upper!=1?"List<":"");
	var lsEnd = (self.upper!=1?"> ":" ");
	var lsDefault = (self.upper!=1?" = new LinkedList<>()":"");
	
	%][%=self.addColumnAnnotation()%][%
	var property = "\t" + visibility + static + lsBegin + type + lsEnd + name + lsDefault + ";\n\n";
	%][%=property%][% 
}

@template
operation Class addGetterAndSetter() {
	var operations = self.ownedOperation;
	
	for(op in operations) {
		if(op.name.startsWith("set")) {
			%][%=op.buildSetter()%][%
		} else if(op.name.startsWith("get")) {
			%][%=op.buildGetter()%][%
		} else {
			if(op.name == self.name) {
				%][%=op.buildMethod(true)%][%
			} else {
				%][%=op.buildMethod(false)%][%
			}
		}
	}	
}

@template
operation Operation buildSetter() {
	var visibility = self.visibility;
	var name = self.name;
	
	var item = "";
	var parameters = "";
	for(param in self.ownedParameter) {
		if(param.direction.name=="in") {
			if(parameters=="") {
				parameters = param.type.name.replace("EDate", "java.util.Date") + " " + param.name;
				item = param.name;
			} else {
				parameters = parameters + ", " + param.type.name.replace("EDate", "java.util.Date") + " " + param.name;
			}
		}	
	}
	
	var operationContent = "\t" + visibility + " void " + name + "(" + parameters + ") {\n\t\tthis." + item + "=" + item + ";\n\t}\n\n";
	%][%=operationContent%][%
}

@template
operation Operation buildGetter() {
	var visibility = self.visibility;
	var returnType = " void ";
	var name = self.name;
	
	var attr = "";
	for(param in self.ownedParameter) {
		if(param.direction.name=="return") {
			returnType = " " + param.type.name.replace("EDate", "java.util.Date") + " ";	
			attr = param.name;
		}	
	}
	
	var operationContent = "\t" + visibility + returnType + name + "() {\n\t\treturn this." + attr + ";\n\t}\n\n";
	%][%=operationContent%][%
}

@template
operation Operation buildMethod(isConstructor: Boolean) {
	var visibility = self.visibility;
	var name = self.name;
	
	var parameters = "";
	var returnType = " void ";
	for(param in self.ownedParameter) {
		if(param.direction.name=="return") {
			returnType = " " + param.type.name.replace("EDate", "java.util.Date") + " ";	
		}
		if(param.direction.name=="in") {
			if(parameters=="") {
				parameters = param.type.name.replace("EDate", "java.util.Date") + " " + param.name;
			} else {
				parameters = parameters + ", " + param.type.name.replace("EDate", "java.util.Date") + " " + param.name;
			}
		}	
	}
	var stateMachine = self.buildStateMachine();
	var newData = "";
	for(line in stateMachine.split("\n")) {
		newData += "\t\t" + line + "\n";
	}
	if(newData.trim() == "") {
		if(self.precondition.size() != 0) {
			newData = self.precondition.get(0).buildRule();
		}
		if(self.postcondition.size() != 0) {
			newData += self.precondition.get(0).buildRule();
		}
	}
	
	var header = "";
	if(isConstructor) {
		header = "\t" + visibility + " " + name + "(" + parameters + ") {\n" + newData + "\n\t}\n\n";
	} else {
		header = "\t" + visibility + returnType + name + "(" + parameters + ") {\n" + newData + "\n\t}\n\n";
	}

	%][%=header%][%
}

operation Operation buildStateMachine(): String {
	var content = "";
	for(method in self.method.select(m|m.isTypeOf(StateMachine))) {
		if(method.qualifiedName.toLowerCase().contains(self.name.toLowerCase())) {
			content += method.createStateMachine();
		}
	}
	return content;
}

operation Constraint buildRule(): String {
	var content = "";
	var body = "";
	if(self.specification != "") {
		if(self.specification.body.size() != 0) {
			body = self.specification.body.get(0);
		}
	}
	
	if(body != "") {	
		var lines = body.split("and");
		
		var onlyAssignments = true;
		for(line in lines) {
			line = line.trim().replace("self.", "") + ";";
			(not (line.contains("=") and not line.contains("=="))).println();
			if(not (line.contains("=") and not line.contains("=="))) {
				onlyAssignments = false;
				break;
			}
		}
		
		if(onlyAssignments) {
			for(line in lines) {
				line = line.trim().replace("self.", "") + ";";
				
				if(line.contains("=")) {
					line = "this." + line;
					
					if(content == "") {
						content = "\t\t" + line;
					} else {
						content += "\n\t\t" + line;
					}
				}
			}
		} else {
			body = body.replace("<>", "!=").replace("and", "&&").replace("or", "||").replace("\n","");
			
			content = "\t\tif(" + body + "){\n\t\t\treturn;\n\t\t}\n";
		}
	}
	return content;
}

@template
operation Class addEnumerations() {
	for(classifier in self.nestedClassifier.select(cl|cl.isTypeOf(Enumeration))) {
		%][%=classifier.buildEnumeration()%][%
	}
}

@template
operation Enumeration buildEnumeration() {
	var content = "\t" + self.visibility + " enum " + self.name + " {";
	
	var items = "";
	for(item in self.ownedLiteral) {
		if(items=="") {
			items = "\t\t" + item.name;
		} else {
			items = items + ",\n\t\t" + item.name;
		}
	}
	content = content + "\n" + items + "\n\t}\n";
	%][%=content%][%
}


@template
operation Class printHeader() {
	var visibility = self.visibility;
	var name = self.name;
	
	var impl = "";
	if(self.getAppliedStereotypes().select(c|c.name="Entry" or c.name="SuperClass").size==1) {
		impl = " implements Serializable ";
	}
	
	var extends = (self.generalization.size==1 ? " extends " + self.generalization[0].general.name : "") + impl;
	
	var header = visibility + " class " + name + extends + " {";
	
	%][%=header%][%
}

@template
operation Class addEntityAnnotation() {
	if(cl.getAppliedStereotypes().select(c|c.name="Entry").size==1) {
		var annotation = "@Entity\n@Table(name=\"" + self.name + "\")";
		%][%=annotation%][%	
	} else if(cl.getAppliedStereotypes().select(c|c.name="SuperClass").size==1) {
		%][%="@MappedSuperclass"%][%
	}
}

@template
operation Property addColumnAnnotation() {
	if(self.eContainer().getAppliedStereotypes().select(c|c.name="Entry" or c.name="SuperClass").size==1) {
		var annotation = "";
		if(self.type.isTypeOf(Class)) {
			if(self.upper!=1) {
				annotation = "\t@OneToMany(cascade=CascadeType.ALL)\n";
			} else {
				annotation = "\t@OneToOne(cascade=CascadeType.ALL)\n";
			}
			annotation = annotation + "\t@JoinColumn(name=\"" + self.name.replace("get", "") + "\", referencedColumnName=\"ID\")\n";
		} else {
			annotation = annotation + "\t@Column(name=\"" + self.name.replace("get", "") + "\")\n";
		}
		%][%=annotation%][%
	}
	if(self.getAppliedStereotypes().select(c|c.name="ID").size==1) {
		var annotation = "\t@Id\n\t@GeneratedValue(strategy = GenerationType.AUTO)\n";
		%][%=annotation%][%
	}
}

%]